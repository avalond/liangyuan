apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.xiaan.liangyuan.liangyuanapp"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode getVersionCode()
        versionName "1.0"
        multiDexEnabled true
        resConfigs "cn"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 关闭一些用不到的东西，加速编译
    tasks.whenTaskAdded { final task ->
        if (task.name.contains("lint") || task.name.contains("clean") ||
                task.name.contains("Aidl") ||
                task.name.contains("mockableAndroidJar") ||
                task.name.contains("UnitTest") ||
                task.name.contains("AndroidTest")) {
            task.enabled = false
        }
    }
    lintOptions {
        abortOnError false
        warning 'InvalidPackage'
        disable 'InvalidPackage'
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    flavorDimensions "liangyuan"
    //

    //
    android.applicationVariants.all { variant ->
        if (!variant.buildType.debuggable) {
            variant.outputs.all {
                def apkName = "liangyuan-release-" + releaseBuildTime() +
                        variant.getVersionCode() +
                        "-v" +
                        variant.getVersionName() +
                        ".apk"
                outputFileName = apkName
            }
        } else {
            variant.outputs.all {
                def apkName = "liangyuan-debug-" + releaseBuildTime() +
                        variant.getVersionCode()+
                        "-v" +
                        variant.getVersionName() +
                        ".apk"
                outputFileName = apkName
            }
        }
    }
}
// build time
static def releaseBuildTime() {
    return new Date().format("yyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
// version code
def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'origin/master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim()) * 100
    }
    catch (ignored) {
        return -1;
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:multidex:1.0.2'
    implementation 'com.orhanobut:logger:2.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
